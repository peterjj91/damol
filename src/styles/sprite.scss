// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$close-name: 'close';
$close-x: 0px;
$close-y: 0px;
$close-offset-x: 0px;
$close-offset-y: 0px;
$close-width: 18px;
$close-height: 18px;
$close-total-width: 58px;
$close-total-height: 39px;
$close-image: '../img/sprite.png';
$close: (0px, 0px, 0px, 0px, 18px, 18px, 58px, 39px, '../img/sprite.png', 'close', );
$delete-black-name: 'delete-black';
$delete-black-x: 46px;
$delete-black-y: 0px;
$delete-black-offset-x: -46px;
$delete-black-offset-y: 0px;
$delete-black-width: 12px;
$delete-black-height: 14px;
$delete-black-total-width: 58px;
$delete-black-total-height: 39px;
$delete-black-image: '../img/sprite.png';
$delete-black: (46px, 0px, -46px, 0px, 12px, 14px, 58px, 39px, '../img/sprite.png', 'delete-black', );
$edit-black-name: 'edit-black';
$edit-black-x: 23px;
$edit-black-y: 0px;
$edit-black-offset-x: -23px;
$edit-black-offset-y: 0px;
$edit-black-width: 18px;
$edit-black-height: 18px;
$edit-black-total-width: 58px;
$edit-black-total-height: 39px;
$edit-black-image: '../img/sprite.png';
$edit-black: (23px, 0px, -23px, 0px, 18px, 18px, 58px, 39px, '../img/sprite.png', 'edit-black', );
$lock-name: 'lock';
$lock-x: 0px;
$lock-y: 23px;
$lock-offset-x: 0px;
$lock-offset-y: -23px;
$lock-width: 14px;
$lock-height: 16px;
$lock-total-width: 58px;
$lock-total-height: 39px;
$lock-image: '../img/sprite.png';
$lock: (0px, 23px, 0px, -23px, 14px, 16px, 58px, 39px, '../img/sprite.png', 'lock', );
$search-name: 'search';
$search-x: 19px;
$search-y: 23px;
$search-offset-x: -19px;
$search-offset-y: -23px;
$search-width: 14px;
$search-height: 14px;
$search-total-width: 58px;
$search-total-height: 39px;
$search-image: '../img/sprite.png';
$search: (19px, 23px, -19px, -23px, 14px, 14px, 58px, 39px, '../img/sprite.png', 'search', );
$spritesheet-width: 58px;
$spritesheet-height: 39px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($close, $delete-black, $edit-black, $lock, $search, );
$spritesheet: (58px, 39px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
